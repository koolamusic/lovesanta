// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

enum EventStatus {
    ACTIVE
    ENDED
    UPCOMING
}

model Event {
    id          String        @id @default(cuid())
    name        String
    year        Int
    date        DateTime
    description  String
    status       EventStatus @default(ENDED)
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    participants Participant[]
    matches     Match[]

    MatchHistory MatchHistory[]
}

model Participant {
    id          String   @id @default(cuid())
    userId      String
    eventId     String
    hasJoined   Boolean  @default(false)
    wishlist    String?  @db.Text
    budget      Float?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    user        User     @relation(fields: [userId], references: [id])
    event       Event    @relation(fields: [eventId], references: [id])
    givingTo    Match[]  @relation("Giver")
    receivingFrom Match[] @relation("Receiver")

    @@unique([userId, eventId])
}

model Match {
    id          String   @id @default(cuid())
    eventId     String
    giverId     String
    receiverId  String
    status      MatchStatus @default(PENDING)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    event       Event    @relation(fields: [eventId], references: [id])
    giver       Participant @relation("Giver", fields: [giverId], references: [id])
    receiver    Participant @relation("Receiver", fields: [receiverId], references: [id])

    @@unique([eventId, giverId])
    @@unique([eventId, receiverId])
}

enum MatchStatus {
    PENDING
    ACCEPTED
    COMPLETED
}


model MatchHistory {
    id          String   @id @default(cuid())
    eventId     String
    giverId     String
    receiverId  String
    matchedAt   DateTime @default(now())
    attemptNo   Int      // Track which attempt this was
    event       Event    @relation(fields: [eventId], references: [id])

    @@index([eventId, giverId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    username      String?   @unique
    passcode      String?
    email         String?   @unique
    emailVerified DateTime?
    region        String?  @default("africa") // africa, world, europe, asia
    loginCount    Int       @default(0) // We use this to manage the pin reset/creation helpers
    image         String?
    bio           String?   // bio is a string users can use to write their wishlist
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    participants  Participant[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
